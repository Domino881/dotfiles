(defwidget sidestuff-system []
  (box 
    :class "sidestuff" 
    :orientation "h" 
    :space-evenly false 
    :halign "end"
    (network :strength net :offline "󰤭" :excellent "󰤨" :good "󰤥"
             :okay "󰤢" :slow "󰤟")
    (bluetooth)
    (audio :high "" :medium "󰖀" :low "󰕿" :muted "󰝟"
           :volume volume)
    (systray
      :class "tray"
      :spacing 2
      :icon-size 18)
    )
  )

(defwidget sidestuff-info []
  (box 
    :class "sidestuff" 
    :orientation "h" 
    :space-evenly false 
    :halign "end"
    (cpu_usage :icon "󰍛")
    (battery :status {EWW_BATTERY.BAT0.status}
             :capacity {EWW_BATTERY.BAT0.capacity}
             :charge "󰂄" :full "󰁹" :ninety "󰂂" :eighty "󰂁" :seventy "󰂀" :sixty "󰁿" 
             :fifty "󰁾"  :fourty "󰁽" :thirty "󰁼" :twenty "󰁻" :eleventy "󱃍")

    )
  )

(defwidget sidestuff-power []
  (box 
    :class "sidestuff-power" 
    :orientation "h" 
    :space-evenly false 
    :halign "end"
    (buttons
      :shutdown "systemctl poweroff"
      :reboot "systemctl reboot"
      :lock "loginctl lock-session"
      :logout "hyprctl dispatch exit"
      :suspend "systemctl suspend"
      :hibernate "dialog --yesno 'Do you want run the command' 10 30"
      :shutdown_icon "⏻"
      :reboot_icon "󰑓"
      :lock_icon ""
      :logout_icon "󰿅"
      :suspend_icon "󰏦"
      :hibernate_icon "󰜗"
      )
    )
  )

(defvar cpu_rev false)

(defwidget cpu_usage [icon]
  (eventbox
    :onhover "${EWW_CMD} update cpu_rev=true"
    :onclick "${EWW_CMD} update cpu_rev=true"
    :onhoverlost "${EWW_CMD} update cpu_rev=false"
    (box
      :spacing 0
      :space-evenly false
      ;;     :tooltip "CPU: ${round(EWW_CPU.avg, 1)}%
      ;; RAM: ${round(EWW_RAM.used_mem / 1048576 / 1000, 1)}GB/${round(EWW_RAM.total_mem / 1048576 / 1000, 1)}GB"
      (label :text "${icon}  ${round(EWW_CPU.avg, 0)}%")
      (revealer
        :transition "slideleft"
        :reveal cpu_rev
        :duration "350ms"
        (ram :icon "󰘚")
      )
      )
  )
  )

(defwidget temp [icon]
  (box  
    (label :text "${icon}   ${round((EWW_TEMPS.ACPITZ_TEMP1 + EWW_TEMPS.ACPITZ_TEMP2 + 
                                      EWW_TEMPS.ACPITZ_TEMP3 + EWW_TEMPS.ACPITZ_TEMP4) / 4, 1)}℃")
    )
  )


(defwidget ram [icon]
  (box
    :spacing 0
    :tooltip "${round(EWW_RAM.used_mem / 1048576, 2)}MiB/${round(EWW_RAM.total_mem / 1048576, 2)}MiB"
    (label :text "${icon}  ${round(EWW_RAM.used_mem_perc, 1)}%")
    )
  )


(defwidget disk [icon]
  (box 
    :tooltip `"/": ${round(EWW_DISK['/'].used / 1000000000, 2)}GB/${round(EWW_DISK['/'].total / 1000000000, 2)}GB`
    (label :text "${icon}   ${round((EWW_DISK['/'].used_perc), 1)}%")
    )
  )

(defpoll bat_timetoempty :interval "10s" :initial "N/A"
  `$HOME/.config/eww/scripts/getbatterytime`  )

(defvar bat_rev false)

(defwidget battery [capacity status eleventy twenty thirty fourty
                    fifty sixty seventy eighty ninety full charge]
  (eventbox
    :onhover "${EWW_CMD} update bat_rev=true"
    :onclick "${EWW_CMD} update bat_rev=true"
    :onhoverlost "${EWW_CMD} update bat_rev=false"
    :onmiddleclick `$HOME/.config/eww/scripts/togglewifi`
      (box :space-evenly false :spacing 0
           :class "battery"
           :space-evenly false
           :spacing 0
        (label :text {(status == 'Charging' ? charge :
                        capacity < 10 ? eleventy :
                        capacity < 20 ? twenty :
                        capacity < 30 ? thirty :
                        capacity < 40 ? fourty :
                        capacity < 50 ? fifty :
                        capacity < 60 ? sixty :
                        capacity < 70 ? seventy :
                        capacity < 80 ? eighty :
                        capacity < 90 ? ninety : full) })
        (revealer
          :transition "slideleft"
          :reveal bat_rev
          :duration "350ms"
          (label :text bat_timetoempty)
          )
        (revealer
          :transition "slideright"
          :reveal {!bat_rev}
          :duration "350ms"
          (label :text "${capacity}%")
          )
        )
    )
    )


(defpoll net :interval "5s"
             :initial 0
  `nmcli -t -f SIGNAL,ACTIVE device wifi \
  | awk -F':' '{if($2=="yes")print$1}'`)
(defpoll wifi_ssid :interval "5s" :initial `N/A`
  `nmcli connection show --active | grep wifi | awk '{print $1}'`
  )
(defvar net_rev false)
(defwidget network [strength offline excellent
                    good okay slow]
  (eventbox
    :onhover "${EWW_CMD} update net_rev=true"
    :onclick "${EWW_CMD} update net_rev=true"
    :onhoverlost "${EWW_CMD} update net_rev=false"
    :onmiddleclick `$HOME/.config/eww/scripts/togglewifi`
    (box
      :space-evenly false
      :spacing 0
      (box
        (label :text {strength == "" ? offline :
          strength < 26 ? slow :
          strength < 51 ? okay :
          strength < 76 ? good : excellent})
      )
      (revealer
        :transition "slideleft"
        :reveal net_rev
        :duration "350ms"
        (box (label :text wifi_ssid ))
        )
      )
    )
  )

(defpoll bluestatus :interval "5s" :initial "off"
  `$HOME/.config/eww/modules/bluetooth.sh`)
(defwidget bluetooth []
  (eventbox
    :onclick `overskride &`
    (box
      :space-evenly false
      :spacing 0
      :class {bluestatus == "off"? "bluetooth-off" : ""}
      (label :text {bluestatus == "on"? "󰂯"
        :bluestatus == "paired" ? "󰂱" : "󰂲"})
      )
    )
  )


(defvar vol_rev false)
(defwidget audio [high medium low muted volume]
  (eventbox 
    ;; :onclick "pavucontrol &"
    :onhover "${EWW_CMD} update vol_rev=true"
    :onclick "${EWW_CMD} update vol_rev=true"
    :onhoverlost "${EWW_CMD} update vol_rev=false"
    (box
      :space-evenly false
      :spacing 0
      (button
      :onclick "amixer -D pulse sset Master toggle & eww poll volume"
        (label :text {volume <= 0? `${muted}`
          : volume < 30 ? `${low}`
          : volume < 70 ? `${medium}`
          : `${high}`})
        )
      (revealer
        :transition "slideright"
        :reveal vol_rev
        :duration "350ms"
        (overlay
          (box
            :spacing 0
            :class "audio"
            (scale
              :active vol_rev
              :min 0
              :max 101
              :value volume
              :orientation "h"
              )
            )
          (box
            :class "volume_dot"
            (scale
              :active vol_rev
              :min 0
              :max 101
              :value volume
              :orientation "h"
              :onchange "eww update volume={} & amixer -D pulse sset Master unmute; amixer -D pulse sset Master {}%"
              )
            )
          )
        )
      )
    )
  )

(defpoll volume :interval "500ms" :initial 0 `$HOME/.config/eww/scripts/getvol`)
;(deflisten volume :initial `50` `pactl subscribe | grep --line-buffered "sink" | while read -r line; do $HOME/.config/eww/scripts/getvol; done`)

;; power-buttons
(defvar but_rev false)
(defwidget buttons [shutdown shutdown_icon 
                    reboot reboot_icon 
                    lock lock_icon
                    logout logout_icon
                    suspend suspend_icon
                    hibernate hibernate_icon]
  (eventbox
    :onhover "${EWW_CMD} update but_rev=true"
    :onclick "${EWW_CMD} update but_rev=true"
    :onhoverlost "${EWW_CMD} update but_rev=false"
    (box :class "power-buttons"
         :space-evenly false
      (revealer 
        :transition "slideright"
        :reveal but_rev
        :duration "350ms"
        (box 
          (button :tooltip "suspend" :onclick suspend suspend_icon)
          (button :tooltip "hibernate" :onclick hibernate hibernate_icon)
          (button :tooltip "lock" :onclick lock lock_icon)
          (button :tooltip "logout" :onclick logout logout_icon)
          (button :tooltip "reboot" :class "reboot" 
              :onclick "${EWW_CMD} open confirm_buttons\
                       --arg confirm='Reboot'\
                       --arg confirm_action='${reboot}'"
            reboot_icon)
          )
        )
      (button :tooltip "shutdown" :class "shutdown"
              :onclick { but_rev ? "${EWW_CMD} open confirm_buttons\
                       --arg confirm='Shutdown'\
                       --arg confirm_action='${shutdown}'" : ""}
        shutdown_icon)
      )
    )
  )

(defwidget confirm_buttons[confirm confirm_action] 
  (box :orientation "v"
    (box "Are you sure?")
    (button :onclick "")
    (box
      (button :onclick "${confirm_action} && ${EWW_CMD} close confirm_buttons"
        :class "button-yes"
        (label :text confirm)
        )
      (button :onclick "${EWW_CMD} close confirm_buttons"
        (label :text "Cancel")
        )
    )
    )
  )
